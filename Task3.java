/*<aside>
üìî –í–∑—è—Ç—å –Ω–∞–±–æ—Ä —Å—Ç—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä,–ú–æ—Ä–æ–∑ –∏ —Å–æ–ª–Ω—Ü–µ –¥–µ–Ω—å —á—É–¥–µ—Å–Ω—ã–π –ï—â–µ —Ç—ã –¥—Ä–µ–º–ª–µ—à—å –¥—Ä—É–≥ –ø—Ä–µ–ª–µ—Å—Ç–Ω—ã–π –ü–æ—Ä–∞ –∫—Ä–∞—Å–∞–≤–∏—Ü–∞ –ø—Ä–æ—Å–Ω–∏—Å—å.

–ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–ª–∏–Ω–µ —Å –ø–æ–º–æ—â—å—é TreeMap. –°—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω–æ–π –Ω–µ –¥–æ–ª–∂–Ω—ã ‚Äú–ø–æ—Ç–µ—Ä—è—Ç—å—Å—è‚Äù.

</aside>*/

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Task3 {
  public static void main(String[] args) {
    
  }

  static String task3(String str){
       
        str = str.replace("\n","");
        str = str.replace(".", " ");
        String[] words = str.split(" ");
        Map<Integer, List<String>> map = new TreeMap<>();

        for (String word:
             words) {
            int len = word.length();
            if(map.containsKey(len)){
                List<String> list = map.get(len);
                list.add(word);
            } else {
                List<String> list = new ArrayList<>();
                list.add(word);
                map.put(len, list);
            }

        }
        return map.toString();
    }
}
